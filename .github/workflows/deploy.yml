name: Deploy CDK Stack

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SNS_EMAIL: ${{ secrets.SNS_EMAIL }}
      AWS_REGION: ${{ secrets.AWS_REGION || 'eu-north-1' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install AWS CDK CLI
        run: npm install -g aws-cdk

      - name: Install Python dependencies
        run: |
          cd infra
          python3 -m venv .venv
          source .venv/bin/activate
          pip install -r ../requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: CDK Bootstrap
        run: |
          cd infra
          source .venv/bin/activate
          cdk bootstrap

      - name: CDK Deploy
        run: |
          cd infra
          source .venv/bin/activate
          cdk deploy --require-approval never

      - name: Print CDK Outputs
        run: |
          aws cloudformation describe-stacks \
            --stack-name InfraStack \
            --query 'Stacks[0].Outputs' \
            --output table

      - name: Get S3 Bucket Name
        id: get-bucket
        run: |
          BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name InfraStack \
            --query 'Stacks[0].Outputs[?OutputKey==`BucketName`].OutputValue' \
            --output text)
          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "S3 Bucket Name: $BUCKET_NAME"

      - name: Upload Sample Files to S3
        run: |
          if [ -d "sample_files" ] && [ "$(ls -A sample_files)" ]; then
            echo "Uploading files to S3 bucket: ${{ steps.get-bucket.outputs.bucket_name }}"
            aws s3 cp ./sample_files/ s3://${{ steps.get-bucket.outputs.bucket_name }}/ --recursive
          else
            echo "No files found in sample_files/ â€” skipping upload."
          fi
        continue-on-error: true

      - name: Invoke Lambda Function (Post-Deploy Test)
        run: |
          FUNCTION_NAME=$(aws cloudformation describe-stacks \
            --stack-name InfraStack \
            --query "Stacks[0].Outputs[?OutputKey=='LambdaFunctionName'].OutputValue" \
            --output text)
          
          echo "Invoking Lambda: $FUNCTION_NAME"
          
          # Wait a moment for Lambda to be fully ready
          echo "Waiting for Lambda function to be ready..."
          sleep 10

          # Create JSON file with payload
          echo '{\"trigger\": \"github-action\"}' > event.json

          # Invoke the function with the payload file
          aws lambda invoke \
            --function-name "$FUNCTION_NAME" \
            --payload file://event.json \
            response.json

          echo "Lambda response:"
          cat response.json

          # Check if Lambda invocation was successful
          if [ $? -eq 0 ]; then
            echo "Lambda function test successful!"
          else
            echo "Lambda function test failed!"
            exit 1
          fi
